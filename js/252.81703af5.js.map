{"version":3,"file":"js/252.81703af5.js","mappings":"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","sources":["webpack://hosp/./src/views/bsns/department/EditDialog.vue","webpack://hosp/./src/views/bsns/department/EditDialog.vue?b109","webpack://hosp/./src/views/bsns/department/index.vue","webpack://hosp/./src/views/bsns/department/index.vue?5efd"],"sourcesContent":["<template>\r\n  <el-dialog v-model=\"editDialogVisible\" :title=\"title\" :before-close=\"handleClose\" width=\"600px\" draggable>\r\n    <el-form\r\n        ref=\"editFormRef\"\r\n        :model=\"editForm\"\r\n        :rules=\"editFormRules\"\r\n        inline\r\n        label-width=\"80px\"\r\n        label-position=\"right\"\r\n        status-icon>\r\n      <el-form-item label=\"父节点\" prop=\"parentId\" style=\"width: 48%;\">\r\n        <el-select v-model=\"editForm.parentId\" placeholder=\"请选择上级科室\">\r\n          <el-option label=\"顶级科室\" :value=\"0\"/>\r\n          <el-option v-for=\"department in departmentList\" :key=\"department.id\" :label=\"'+ '+department.name\"\r\n                     :value=\"department.id\"/>\r\n        </el-select>\r\n      </el-form-item>\r\n<!--      <el-form-item label=\"状态\" prop=\"disabled\" style=\"width: 40%;\">-->\r\n<!--        <el-switch-->\r\n<!--            v-model=\"editForm.disabled\"-->\r\n<!--            style=\"&#45;&#45;el-switch-on-color: #13ce66; &#45;&#45;el-switch-off-color: #ff4949\"-->\r\n<!--            active-text=\"启用\"-->\r\n<!--            inactive-text=\"禁用\"-->\r\n<!--            :active-value=\"false\"-->\r\n<!--            :inactive-value=\"true\"-->\r\n<!--            width=\"50px\"-->\r\n<!--            disabled-->\r\n<!--        />-->\r\n<!--      </el-form-item>-->\r\n      <el-form-item label=\"科室名称\" prop=\"name\" style=\"width: 100%;\">\r\n        <el-input v-model=\"editForm.name\"/>\r\n      </el-form-item>\r\n      <el-form-item label=\"科室介绍\" prop=\"note\" style=\"width: 100%;\">\r\n        <el-input v-model=\"editForm.note\" type=\"textarea\" :rows=\"5\"/>\r\n      </el-form-item>\r\n    </el-form>\r\n    <template #footer>\r\n      <span class=\"dialog-footer\">\r\n        <el-button @click=\"handleReset(id)\">重置</el-button>\r\n        <el-button @click=\"handleCancel\">取消</el-button>\r\n        <el-button type=\"primary\" @click=\"handleConfirm\">确定</el-button>\r\n      </span>\r\n    </template>\r\n  </el-dialog>\r\n</template>\r\n\r\n<script setup>\r\nimport {defineProps, defineEmits, computed, ref, watch, reactive} from 'vue';\r\nimport AxiosUtil from \"@/utils/AxiosUtil\";\r\nimport {ElMessageBox, ElMessage} from \"element-plus\";\r\n\r\n// 定义传入该子组件的参数\r\nconst props = defineProps({\r\n  editDialogVisible: {\r\n    type: Boolean,\r\n    required: true,\r\n    default: false\r\n  },\r\n  id: {\r\n    type: Number,\r\n    required: true,\r\n    default: -1\r\n  },\r\n  title: {\r\n    type: String,\r\n    required: true,\r\n    default: ''\r\n  }\r\n});\r\n\r\n// 定义组件（自定义）事件\r\nconst emit = defineEmits(['update:editDialogVisible', 'handleSubmit']);\r\n\r\n// 定义“编辑”对话框的显示状态\r\nconst editDialogVisible = computed({\r\n  // 只读！读取时从父组件获取，更新时更新父组件\r\n  get() {\r\n    return props.editDialogVisible;\r\n  },\r\n  set(newValue) {\r\n    emit('update:editDialogVisible', newValue);\r\n  }\r\n});\r\n\r\n// 定义表单数据\r\nconst editForm = ref({\r\n  id: -1,\r\n  parentId: 0,\r\n  name: '',\r\n  disabled: false,\r\n  note: '',\r\n});\r\n\r\n// 定义上级科室列表\r\nconst departmentList = ref([]);\r\n\r\nconst validateDepartment = async (rule, value, callback) => {\r\n  // console.log(rule.field)\r\n  // console.log(value)\r\n\r\n  let url;\r\n  // 基础格式验证通过后，才给 url 赋值。\r\n  if (rule.field == 'name') {\r\n    if (value && value.length > 16) {\r\n      callback(new Error('科室名称长度不可超过16位'));\r\n    } else {\r\n      url = '/api/bsns/departments/checkDepartment?id=' + editForm.value.id + '&name=' + value;\r\n    }\r\n  }\r\n  // url 有值，才向后台发送验证请求。\r\n  // console.log(url);\r\n  if (url) {\r\n    // console.log('向后台发送请求');\r\n    let res = await AxiosUtil.post(url);\r\n    // console.log(res.data);\r\n    if (res.data.code == 1) {\r\n      callback(new Error(res.data.msg));\r\n    } else {\r\n      callback();\r\n    }\r\n  }\r\n}\r\n\r\n// 定义表单验证规则\r\nconst editFormRules = reactive({\r\n  parentId: [\r\n    {required: true, message: '上级科室不能为空', trigger: 'blur'},\r\n  ],\r\n  name: [\r\n    {required: true, message: '科室名称不能为空', trigger: 'blur'},\r\n    {validator: validateDepartment, trigger: 'change'},\r\n    {validator: validateDepartment, trigger: 'blur'},\r\n  ],\r\n  disabled: [\r\n    {required: true, message: '状态不能为空', trigger: 'blur'},\r\n  ],\r\n  note: [\r\n    {required: false, max: 300, message: '科室介绍不可超过300个字符', trigger: 'blur'},\r\n  ],\r\n})\r\n\r\n// 定义表单引用\r\nconst editFormRef = ref(null);\r\n\r\n// 表单重置事件\r\nconst handleReset = async (id) => {\r\n  if (id == -1) {\r\n    editForm.value = {\r\n      id: -1,\r\n      parentId: 0,\r\n      name: '',\r\n      disabled: false,\r\n      note: '',\r\n    };\r\n    console.log('清空表单...');\r\n  } else {\r\n    let res = await AxiosUtil.get('/api/bsns/departments/' + id);\r\n    console.log(res.data);\r\n    if (res.data.code == 20010) {\r\n      let department = res.data.department;\r\n      // 更新表格数据\r\n      editForm.value = department;\r\n    } else {\r\n      ElMessage({\r\n        message: res.data.msg,\r\n        type: 'error',\r\n      });\r\n    }\r\n    console.log('从后台填充...');\r\n  }\r\n  // 无论是新增还是编辑，都需要向后台请求父节点列表\r\n  let res = await AxiosUtil.get('/api/bsns/departments');\r\n  console.log(res.data);\r\n  if (res.data.code == 20010) {\r\n    let departmentListTree = res.data.departmentList;\r\n    // 更新上级科室列表\r\n    departmentList.value = departmentListTree;\r\n  } else {\r\n    ElMessage({\r\n      message: res.data.msg,\r\n      type: 'error',\r\n    });\r\n  }\r\n}\r\n\r\n// 定义关闭对话框前的确认操作\r\nconst handleClose = (done) => {\r\n  ElMessageBox.confirm('确认在未保存的情况下关闭对话框？')\r\n      .then(() => {\r\n        done()\r\n      })\r\n      .catch(() => {\r\n        // catch error\r\n      })\r\n}\r\n\r\n// 定义对话框关闭事件\r\nconst handleCancel = () => {\r\n  editDialogVisible.value = false;\r\n}\r\n\r\n// 定义确认按钮事件\r\nconst handleConfirm = () => {\r\n  // 表单验证\r\n  editFormRef.value.validate(async valid => {\r\n    if (valid) {\r\n      // 表单验证通过\r\n      let url, res;\r\n      if (editForm.value.id == -1) {\r\n        console.log('提交新增...');\r\n        url = '/api/bsns/departments';\r\n        res = await AxiosUtil.post(url, editForm.value);\r\n        console.log(\"新增科室 res.data= \", res.data);\r\n      } else {\r\n        console.log('提交修改...');\r\n        url = '/api/bsns/departments';\r\n        res = await AxiosUtil.put(url, editForm.value);\r\n        console.log(\"修改科室 res.data= \", res.data);\r\n      }\r\n      if (res.data.code == 20020 || res.data.code == 20030) {\r\n        ElMessage({\r\n          message: res.data.msg,\r\n          type: 'success',\r\n        });\r\n        emit('handleSubmit'); // 触发自定义事件，使父组件刷新数据\r\n        handleCancel(); // 关闭对话框\r\n      } else {\r\n        ElMessage({\r\n          message: res.data.msg,\r\n          type: 'error',\r\n        });\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\n// 当对话框重新显示时重置表单\r\nwatch(editDialogVisible, (newValue) => {\r\n  if (newValue == true) {\r\n    handleReset(props.id);\r\n  }\r\n})\r\n\r\n</script>\r\n\r\n\r\n<script>\r\nexport default {\r\n  name: \"EditDialog\"\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>","import script from \"./EditDialog.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./EditDialog.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\r\n  <el-container>\r\n    <!--操作台-->\r\n    <el-header class=\"operatingFloor\">\r\n      <el-row :gutter=\"20\">\r\n        <el-col :span=\"7\">\r\n          <el-input v-model=\"query\" placeholder=\"搜索科室...\" @keyup.enter=\"handleQuery\" clearable/>\r\n        </el-col>\r\n        <el-button type=\"primary\" :icon=\"Search\" @click=\"handleQuery\">查询</el-button>\r\n        <el-button type=\"success\" :icon=\"DocumentAdd\" @click=\"handleEdit(null)\" v-if=\"hasAnyAuthority('business:department:add')\">新增</el-button>\r\n        <el-popconfirm title=\"您确定要批量删除这些记录吗？\" @confirm=\"handleDelete(null)\" v-if=\"hasAnyAuthority('business:department:delete')\">\r\n          <template #reference>\r\n            <el-button type=\"danger\" :icon=\"Delete\" :disabled=\"batchDeleteBtnDisabled\">批量删除</el-button>\r\n          </template>\r\n        </el-popconfirm>\r\n      </el-row>\r\n    </el-header>\r\n    <el-main style=\"padding: 5px; background: aliceblue;\" id=\"mainView\">\r\n      <el-table\r\n          :data=\"tableData\"\r\n          :max-height=\"tableMaxHeight\"\r\n          :default-sort=\"{ prop: 'id', order: 'ascending' }\"\r\n          row-key=\"id\"\r\n          :indent=\"25\"\r\n          size=\"default\"\r\n          @selection-change=\"handleSelectionChange\"\r\n          style=\"width: 100%\"\r\n          highlight-current-row\r\n          default-expand-all\r\n          stripe>\r\n        <el-table-column type=\"selection\" width=\"40\" align=\"center\"/>\r\n        <el-table-column prop=\"name\" label=\"科室名称\" width=\"200\" header-align=\"center\" sortable fixed/>\r\n<!--        <el-table-column prop=\"disabled\" label=\"状态\" width=\"76\" align=\"center\"-->\r\n<!--                         :filters=\"[{ text: '启用', value: false },{ text: '禁用', value: true },]\"-->\r\n<!--                         :filter-method=\"filterState\">-->\r\n<!--          <template #default=\"{row}\">-->\r\n<!--            <el-switch-->\r\n<!--                v-model=\"row.disabled\"-->\r\n<!--                inline-prompt-->\r\n<!--                style=\"&#45;&#45;el-switch-on-color: #13ce66; &#45;&#45;el-switch-off-color: #ff4949\"-->\r\n<!--                active-text=\"启用\"-->\r\n<!--                inactive-text=\"禁用\"-->\r\n<!--                :active-value=\"false\"-->\r\n<!--                :inactive-value=\"true\"-->\r\n<!--                width=\"50px\"-->\r\n<!--                :loading=\"row.loading\"-->\r\n<!--                @change=\"handleStateChange(row)\"-->\r\n<!--                :disabled=\"!hasAnyAuthority('business:department:edit')\"-->\r\n<!--            />-->\r\n<!--          </template>-->\r\n<!--        </el-table-column>-->\r\n        <el-table-column prop=\"createTime\" label=\"创建时间\" width=\"160\" header-align=\"center\" sortable/>\r\n        <el-table-column prop=\"updateTime\" label=\"更新时间\" width=\"160\" header-align=\"center\" sortable/>\r\n        <el-table-column prop=\"note\" label=\"科室介绍\" min-width=\"200\" header-align=\"center\"/>\r\n        <el-table-column label=\"操作\" width=\"130\" align=\"right\" header-align=\"center\" fixed=\"right\">\r\n          <template #default=\"scope\">\r\n            <el-button type=\"primary\" :icon=\"Edit\" @click=\"handleEdit(scope.row.id)\" v-if=\"hasAnyAuthority('business:department:edit')\"/>\r\n            <el-popconfirm title=\"您确定要删除这条记录吗？\" @confirm=\"handleDelete(scope.row.id)\" v-if=\"hasAnyAuthority('business:department:delete')\">\r\n              <template #reference>\r\n                <el-button type=\"danger\" :icon=\"Delete\"/>\r\n              </template>\r\n            </el-popconfirm>\r\n          </template>\r\n        </el-table-column>\r\n      </el-table>\r\n    </el-main>\r\n    <el-footer style=\"background: powderblue;height: 32px;display: flex;align-items: center;justify-content: flex-end;\"\r\n               v-if=\"total>0\">\r\n      <el-pagination\r\n          v-model:currentPage=\"queryForm.currentPage\"\r\n          v-model:page-size=\"queryForm.pageSize\"\r\n          :page-sizes=\"[5, 10, 20, 50, 100]\"\r\n          small\r\n          background\r\n          layout=\"total, sizes, prev, pager, next, jumper\"\r\n          :total=\"total\"\r\n          @size-change=\"handleSizeChange\"\r\n          @current-change=\"handleCurrentChange\"\r\n      />\r\n    </el-footer>\r\n  </el-container>\r\n  <EditDialog v-model:edit-dialog-visible=\"editDialogVisible\" :id=\"editId\" :title=\"editTitle\"\r\n              @handleSubmit=\"fetchData\"/>\r\n</template>\r\n\r\n<script setup>\r\nimport {Search, DocumentAdd, Delete, Edit} from '@element-plus/icons-vue'\r\nimport {onMounted, reactive, ref, watch} from \"vue\";\r\nimport AxiosUtil from \"@/utils/AxiosUtil\";\r\nimport EditDialog from \"./EditDialog\";\r\nimport qs from \"qs\";\r\nimport {ElMessage} from \"element-plus\";\r\n\r\n/*====以下为一些数据的定义====*/\r\n\r\n// 定义表单的查询查询条件\r\nconst queryForm = reactive({\r\n  query: '', // 查找的字符\r\n  currentPage: 1, // 当前页数\r\n  pageSize: 10, // 页面记录容量\r\n});\r\n\r\n// 定义临时的查询关键词\r\nconst query = ref('');\r\n\r\n// 定义从分页组件的总记录数\r\nconst total = ref(40);\r\n\r\n// 定义批量删除按钮是否禁用\r\nconst batchDeleteBtnDisabled = ref(true);\r\n\r\n// 定义已选择的记录\r\nconst multipleSelection = ref([]);\r\n\r\n// 定义表格的最大高度\r\nconst tableMaxHeight = ref(400);\r\n\r\n// 定义表格数据\r\nconst tableData = ref([\r\n  {\r\n    id: 10075286712,\r\n    name: '外科',\r\n    disabled: false,\r\n    note: '',\r\n    createTime: '2022-09-23 20:10:01',\r\n    updateTime: '2022-10-18 18:16:18',\r\n    children: [],\r\n  },\r\n  {\r\n    id: 1007448077,\r\n    name: '内科',\r\n    disabled: false,\r\n    note: '',\r\n    createTime: '2022-09-23 20:10:01',\r\n    updateTime: '2022-10-18 18:16:18',\r\n    children: [\r\n      {\r\n        id: 1007448078,\r\n        name: '神经内科',\r\n        disabled: true,\r\n        note: '',\r\n        createTime: '2022-09-23 20:10:01',\r\n        updateTime: '2022-10-18 18:16:18',\r\n        children: [],\r\n      },\r\n    ],\r\n  },\r\n]);\r\n\r\n// 定义编辑对话框的显示状态\r\nconst editDialogVisible = ref(false);\r\n\r\n// 定义传入编辑对话框的id值\r\nconst editId = ref(-1);\r\n\r\n// 定义传入编辑对话框的title值\r\nconst editTitle = ref('');\r\n\r\n\r\n/*====以下为各按钮的点击事件====*/\r\n\r\n// 处理通过关键字查询\r\nconst handleQuery = () => {\r\n  // 设置当前页码为1\r\n  queryForm.currentPage = 1;\r\n  // 由于设置了当queryForm发生变化时才从后台重新拉取数据，\r\n  // 因此若查找的字符实际上未发生变化则需要手动刷新数据\r\n  // 即先点查询按钮，再进行翻页等操作\r\n  if (queryForm.query == query.value) {\r\n    console.log('手动刷新：关键字不变...');\r\n    fetchData();\r\n  } else {\r\n    queryForm.query = query.value;\r\n  }\r\n}\r\n\r\n// 处理删除记录\r\nconst handleDelete = async (id) => {\r\n  if (!id) {\r\n    // 不传入参数时，为批量删除\r\n    id = [];\r\n    multipleSelection.value.forEach(item => {\r\n      id.push(item.id);\r\n    });\r\n  } else {\r\n    // 不传入参数时，为单个删除\r\n    id = [id];\r\n  }\r\n  console.log('删除...', id);\r\n  let url = '/api/bsns/departments/' + id.join(',');\r\n  console.log('url=', url);\r\n  let res = await AxiosUtil.del(url);\r\n  console.log('res=', res);\r\n  if (res.data.code == 20040) {\r\n    ElMessage({\r\n      message: res.data.msg,\r\n      type: 'success',\r\n    });\r\n    await fetchData();\r\n  } else {\r\n    ElMessage({\r\n      message: res.data.msg,\r\n      type: 'error',\r\n    });\r\n  }\r\n}\r\n\r\n// 处理新增、编辑\r\nconst handleEdit = (id) => {\r\n  if (id) {\r\n    console.log('修改...', id);\r\n    editId.value = id;\r\n    editTitle.value = '科室修改';\r\n  } else {\r\n    console.log('新增...', id);\r\n    editId.value = -1;\r\n    editTitle.value = '科室添加';\r\n  }\r\n  editDialogVisible.value = true;\r\n}\r\n\r\n\r\n/*====以下为一些监听以及其他函数====*/\r\n\r\n// 处理页面容量的改变\r\nconst handleSizeChange = (val) => {\r\n  console.log(`${val} items per page`);\r\n}\r\n\r\n// 处理页码的改变\r\nconst handleCurrentChange = (val) => {\r\n  console.log(`current page: ${val}`);\r\n}\r\n\r\n// 处理选择集的改变\r\nconst handleSelectionChange = (list) => {\r\n  multipleSelection.value = list;\r\n  // 更新批量删除按钮的可用状态\r\n  batchDeleteBtnDisabled.value = list.length == 0;\r\n  console.log('新选择= ', list);\r\n}\r\n\r\n// 处理状态的改变\r\nconst handleStateChange = async (row) => {\r\n  // console.log('状态变化...', row.id);\r\n\r\n  // 先设置元素为加载状态\r\n  row.loading = true;\r\n  let url = '/api/bsns/departments/updateDisabled/' + row.id + '/' + row.disabled;\r\n  // console.log(url);\r\n\r\n  // 为保证程序能正常走完，发送请求要用 try...catch 包围\r\n  try {\r\n    let res = await AxiosUtil.put(url);\r\n    if (res.data.code == 20030) {\r\n      ElMessage({\r\n        message: res.data.msg,\r\n        type: 'success',\r\n      });\r\n    } else {\r\n      ElMessage({\r\n        message: res.data.msg,\r\n        type: 'error',\r\n      });\r\n      row.disabled = !row.disabled; // 恢复显示为修改前的状态\r\n    }\r\n  } catch (e) {\r\n    console.log('e=', e);\r\n    ElMessage({\r\n      message: '操作失败！' + e,\r\n      type: 'error',\r\n    });\r\n    row.disabled = !row.disabled; // 恢复显示为修改前的状态\r\n  }\r\n\r\n  // 请求结束后取消元素的加载状态\r\n  row.loading = false;\r\n}\r\n\r\n// 处理按状态筛选记录\r\nconst filterState = (value, row) => {\r\n  return row.disabled === value;\r\n}\r\n\r\n// 从后台获取数据\r\nconst fetchData = async () => {\r\n  let url = '/api/bsns/departments?' + qs.stringify(queryForm);\r\n  console.log('url=', url);\r\n  // 从后台获取数据\r\n  let res = await AxiosUtil.get(url);\r\n  console.log(\"更新科室列表 res= \", res);\r\n  if (res.data.code == 20010) {\r\n    // 更新表格数据\r\n    tableData.value = res.data.departmentList;\r\n    // 更新分页组件总记录数\r\n    total.value = res.data.total;\r\n  } else {\r\n    ElMessage({\r\n      message: res.data.msg,\r\n      type: 'error',\r\n    });\r\n  }\r\n}\r\n\r\nfetchData();\r\n\r\n// 当表单的查询查询条件发生变化时，重新拉取数据\r\nwatch(queryForm, async (newForm, oldForm) => {\r\n  // 如果改变每页容量，则确保当前页的第一条记录在新的结果中仍然出现\r\n  if (newForm.pageSize != oldForm.pageSize) {\r\n    let currentItem = oldForm.pageSize * (oldForm.currentPage - 1) + 1;\r\n    newForm.currentPage = Math.ceil(currentItem / newForm.pageSize);\r\n  }\r\n  console.log(Date.now() + ' 重新拉取数据...');\r\n  console.log(queryForm);\r\n  await fetchData();\r\n});\r\n\r\n// 新建一个ResizeObserver用于监视表格容器尺寸的变化\r\nconst resizeObserver = new ResizeObserver((entries) => {\r\n  for (const entry of entries) {\r\n    // 仅对指定id的元素生效\r\n    if (entry.target.id == 'mainView') {\r\n      let mainViewHeight;\r\n      // 由于兼容性问题，获取元素高度时需谨慎\r\n      // https://developer.mozilla.org/zh-CN/docs/Web/API/ResizeObserver\r\n      // https://developer.mozilla.org/zh-CN/docs/Web/API/ResizeObserverEntry\r\n      if (entry.contentBoxSize) {\r\n        // Firefox implements `contentBoxSize` as a single content rect, rather than an array\r\n        const contentBoxSize = Array.isArray(entry.contentBoxSize) ? entry.contentBoxSize[0] : entry.contentBoxSize;\r\n        mainViewHeight = contentBoxSize.blockSize;\r\n      } else {\r\n        mainViewHeight = entry.contentRect.height;\r\n      }\r\n      // 设置表格的最大高度为表格容器的高度\r\n      tableMaxHeight.value = mainViewHeight;\r\n      // console.log('mainViewHeight= ', mainViewHeight);\r\n    }\r\n  }\r\n});\r\n\r\n// 在组件完成初始渲染并创建 DOM 节点后开始监视表格容器\r\nonMounted(() => {\r\n  const mainView = document.getElementById('mainView');\r\n  resizeObserver.observe(mainView);\r\n});\r\n\r\n\r\n</script>\r\n\r\n<script>\r\nexport default {\r\n  name: \"index\"\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n/*操作台*/\r\n.operatingFloor {\r\n  /*display: flex;*/\r\n  /*align-items: center; !*align-items 属性可以使元素在交叉轴方向对齐*!*/\r\n  /*justify-content: flex-start; !*justify-content属性用来使元素在主轴方向上对齐*!*/\r\n  height: 48px;\r\n  padding: 8px 10px;\r\n\r\n}\r\n\r\n.el-tag--small {\r\n  margin-left: 5px;\r\n}\r\n\r\n</style>","import script from \"./index.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./index.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./index.vue?vue&type=style&index=0&id=ce2c612a&scoped=true&lang=css\"\n\nimport exportComponent from \"C:\\\\Users\\\\DYZQ2\\\\Desktop\\\\redo\\\\hosp\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-ce2c612a\"]])\n\nexport default __exports__"],"names":["name","editDialogVisible","computed","get","props","set","newValue","emit","editForm","ref","id","parentId","disabled","note","departmentList","validateDepartment","async","rule","value","callback","url","field","length","Error","res","AxiosUtil","data","code","msg","editFormRules","reactive","required","message","trigger","validator","max","editFormRef","handleReset","console","log","department","ElMessage","type","departmentListTree","handleClose","done","ElMessageBox","then","catch","handleCancel","handleConfirm","validate","valid","watch","__exports__","queryForm","query","currentPage","pageSize","total","batchDeleteBtnDisabled","multipleSelection","tableMaxHeight","tableData","createTime","updateTime","children","editId","editTitle","handleQuery","fetchData","handleDelete","forEach","item","push","join","handleEdit","handleSizeChange","val","handleCurrentChange","handleSelectionChange","list","qs","newForm","oldForm","currentItem","Math","ceil","Date","now","resizeObserver","ResizeObserver","entries","entry","target","mainViewHeight","contentBoxSize","Array","isArray","blockSize","contentRect","height","onMounted","mainView","document","getElementById","observe"],"sourceRoot":""}