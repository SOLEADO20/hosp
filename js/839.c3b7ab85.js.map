{"version":3,"file":"js/839.c3b7ab85.js","mappings":"iPA2KA,EAAe,CACbA,KAAM,c,8OAxHFC,GAAgCC,EAAAA,EAAAA,IAAS,CAE7CC,MACE,OAAOC,EAAMH,6BACd,EACDI,IAAIC,GACFC,EAAK,uCAAwCD,EAC9C,IAIGE,GAAWC,EAAAA,EAAAA,IAAI,CACnBC,GAAI,GACJC,aAAc,IAIVC,GAAiBH,EAAAA,EAAAA,IAAI,IAGrBI,GAAgBC,EAAAA,EAAAA,IAAS,CAC7BH,aAAc,CACZ,CAACI,UAAU,EAAMC,QAAS,WAAYC,QAAS,WAK7CC,GAAcT,EAAAA,EAAAA,IAAI,MAGlBU,EAAcC,UAClB,IAAIC,EAAa,GACjB,IAAK,MAAMC,KAAQlB,EAAMmB,SACvBF,EAAWG,KAAKF,EAAKZ,IAEvBF,EAASiB,MAAQ,CACff,GAAIW,EACJV,aAAc,GAEhBe,QAAQC,IAAI,WAEZ,IAAIC,QAAYC,EAAAA,GAAAA,IAAc,yBAE9B,GADAH,QAAQC,IAAIC,EAAIE,MACK,OAAjBF,EAAIE,KAAKC,KAAe,CAC1B,IAAIC,EAAc,GAClBJ,EAAIE,KAAKlB,eAAeqB,SAAQC,IAC9BA,EAAKlC,KAAO,KAAOkC,EAAKlC,KACxBgC,EAAYR,KAAKU,GACjBA,EAAKC,SAASF,SAAQG,IACpBA,EAAMpC,KAAO,OAASoC,EAAMpC,KAC5BgC,EAAYR,KAAKY,EAAjB,GAFF,IAMFxB,EAAea,MAAQO,CACxB,MACCK,EAAAA,EAAAA,IAAU,CACRrB,QAASY,EAAIE,KAAKQ,IAClBC,KAAM,SAET,EAIGC,EAAeC,IACnBC,EAAAA,EAAAA,QAAqB,oBAChBC,MAAK,KACJF,GAAM,IAEPG,OAAM,QAJX,EAUIC,EAAe,KACnB5C,EAA8BwB,OAAQ,CAAtC,EAIIqB,EAAgB,KAEpB5B,EAAYO,MAAMsB,UAAS3B,UACzB,GAAI4B,EAAO,CAET,IAAIC,EAAKrB,EACTF,QAAQC,IAAI,WACZsB,EAAM,oCAAsCzC,EAASiB,MAAMf,GAAGwC,KAAK,KAAO,IAAM1C,EAASiB,MAAMd,aAC/Fe,QAAQC,IAAI,OAAQsB,GACpBrB,QAAYC,EAAAA,GAAAA,IAAcoB,EAAKzC,EAASiB,OACxCC,QAAQC,IAAI,oBAAqBC,EAAIE,MAChB,OAAjBF,EAAIE,KAAKC,MAAkC,OAAjBH,EAAIE,KAAKC,OACrCM,EAAAA,EAAAA,IAAU,CACRrB,QAASY,EAAIE,KAAKQ,IAClBC,KAAM,YAERhC,EAAK,gBACLsC,MAEAR,EAAAA,EAAAA,IAAU,CACRrB,QAASY,EAAIE,KAAKQ,IAClBC,KAAM,SAGX,IAtBH,E,OA2BFY,EAAAA,EAAAA,IAAMlD,GAAgCK,IACpB,GAAZA,GACFa,GACD,I,+xCCjKH,MAAMiC,EAAc,EAEpB,O","sources":["webpack://hosp/./src/views/bsns/room/ChangeDepartmentDialog.vue","webpack://hosp/./src/views/bsns/room/ChangeDepartmentDialog.vue?c6eb"],"sourcesContent":["<template>\r\n  <el-dialog v-model=\"changeDepartmentDialogVisible\" title=\"批量修改科室\" :before-close=\"handleClose\" width=\"600px\" draggable>\r\n    <el-form\r\n        ref=\"editFormRef\"\r\n        :model=\"editForm\"\r\n        :rules=\"editFormRules\"\r\n        inline\r\n        label-width=\"80px\"\r\n        label-position=\"right\"\r\n        status-icon>\r\n      <el-form-item label=\"所属科室\" prop=\"departmentId\" style=\"width: 48%;\">\r\n        <el-select v-model=\"editForm.departmentId\" placeholder=\"请选择所属科室\">\r\n          <el-option label=\"顶级科室\" :value=\"0\"/>\r\n          <el-option v-for=\"department in departmentList\" :key=\"department.id\" :label=\"department.name\"\r\n                     :value=\"department.id\"/>\r\n        </el-select>\r\n      </el-form-item>\r\n    </el-form>\r\n    <template #footer>\r\n      <span class=\"dialog-footer\">\r\n        <el-button @click=\"handleReset\">重置</el-button>\r\n        <el-button @click=\"handleCancel\">取消</el-button>\r\n        <el-button type=\"primary\" @click=\"handleConfirm\">确定</el-button>\r\n      </span>\r\n    </template>\r\n  </el-dialog>\r\n</template>\r\n\r\n<script setup>\r\nimport {defineProps, defineEmits, computed, ref, watch, reactive} from 'vue';\r\nimport AxiosUtil from \"@/utils/AxiosUtil\";\r\nimport {ElMessageBox, ElMessage} from \"element-plus\";\r\n\r\n// 定义传入该子组件的参数\r\nconst props = defineProps({\r\n  changeDepartmentDialogVisible: {\r\n    type: Boolean,\r\n    required: true,\r\n    default: false\r\n  },\r\n  // 诊室列表\r\n  roomList: {\r\n    type: Array,\r\n    required: true,\r\n    default: () => []\r\n  },\r\n});\r\n\r\n// 定义组件（自定义）事件\r\nconst emit = defineEmits(['update:changeDepartmentDialogVisible', 'handleSubmit']);\r\n\r\n// 定义“编辑”对话框的显示状态\r\nconst changeDepartmentDialogVisible = computed({\r\n  // 只读！读取时从父组件获取，更新时更新父组件\r\n  get() {\r\n    return props.changeDepartmentDialogVisible;\r\n  },\r\n  set(newValue) {\r\n    emit('update:changeDepartmentDialogVisible', newValue);\r\n  }\r\n});\r\n\r\n// 定义表单的查询查询条件\r\nconst editForm = ref({\r\n  id: [],\r\n  departmentId: 0,\r\n});\r\n\r\n// 定义科室列表\r\nconst departmentList = ref([]);\r\n\r\n// 定义表单验证规则\r\nconst editFormRules = reactive({\r\n  departmentId: [\r\n    {required: true, message: '所属科室不能为空', trigger: 'blur'},\r\n  ],\r\n})\r\n\r\n// 定义表单引用\r\nconst editFormRef = ref(null);\r\n\r\n// 表单重置事件\r\nconst handleReset = async (id) => {\r\n  let roomIdList = [];\r\n  for (const room of props.roomList) {\r\n    roomIdList.push(room.id);\r\n  }\r\n  editForm.value = {\r\n    id: roomIdList,\r\n    departmentId: 0,\r\n  };\r\n  console.log('清空表单...');\r\n  // 后台请求科室列表\r\n  let res = await AxiosUtil.get('/api/bsns/departments');\r\n  console.log(res.data);\r\n  if (res.data.code == 20010) {\r\n    let departments = [];\r\n    res.data.departmentList.forEach(item => {\r\n      item.name = \"+ \" + item.name;\r\n      departments.push(item);\r\n      item.children.forEach(child => {\r\n        child.name = \"••• \" + child.name;\r\n        departments.push(child);\r\n      })\r\n    });\r\n    // 更新科室列表\r\n    departmentList.value = departments;\r\n  } else {\r\n    ElMessage({\r\n      message: res.data.msg,\r\n      type: 'error',\r\n    });\r\n  }\r\n}\r\n\r\n// 定义关闭对话框前的确认操作\r\nconst handleClose = (done) => {\r\n  ElMessageBox.confirm('确认在未保存的情况下关闭对话框？')\r\n      .then(() => {\r\n        done()\r\n      })\r\n      .catch(() => {\r\n        // catch error\r\n      })\r\n}\r\n\r\n// 定义对话框关闭事件\r\nconst handleCancel = () => {\r\n  changeDepartmentDialogVisible.value = false;\r\n}\r\n\r\n// 定义确认按钮事件\r\nconst handleConfirm = () => {\r\n  // 表单验证\r\n  editFormRef.value.validate(async valid => {\r\n    if (valid) {\r\n      // 表单验证通过\r\n      let url, res;\r\n      console.log('提交修改...');\r\n      url = '/api/bsns/rooms/updateDepartment/' + editForm.value.id.join(',') + '/' + editForm.value.departmentId;\r\n      console.log('url=', url);\r\n      res = await AxiosUtil.put(url, editForm.value);\r\n      console.log(\"修改诊室科室 res.data= \", res.data);\r\n      if (res.data.code == 20020 || res.data.code == 20030) {\r\n        ElMessage({\r\n          message: res.data.msg,\r\n          type: 'success',\r\n        });\r\n        emit('handleSubmit'); // 触发自定义事件，使父组件刷新数据\r\n        handleCancel(); // 关闭对话框\r\n      } else {\r\n        ElMessage({\r\n          message: res.data.msg,\r\n          type: 'error',\r\n        });\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\n// 当对话框重新显示时重置表单\r\nwatch(changeDepartmentDialogVisible, (newValue) => {\r\n  if (newValue == true) {\r\n    handleReset();\r\n  }\r\n})\r\n\r\n</script>\r\n\r\n\r\n<script>\r\nexport default {\r\n  name: \"EditDialog\"\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>","import script from \"./ChangeDepartmentDialog.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./ChangeDepartmentDialog.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"names":["name","changeDepartmentDialogVisible","computed","get","props","set","newValue","emit","editForm","ref","id","departmentId","departmentList","editFormRules","reactive","required","message","trigger","editFormRef","handleReset","async","roomIdList","room","roomList","push","value","console","log","res","AxiosUtil","data","code","departments","forEach","item","children","child","ElMessage","msg","type","handleClose","done","ElMessageBox","then","catch","handleCancel","handleConfirm","validate","valid","url","join","watch","__exports__"],"sourceRoot":""}