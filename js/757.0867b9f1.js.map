{"version":3,"file":"js/757.0867b9f1.js","mappings":"oQAgMA,EAAe,CACbA,KAAM,mB,uNA/IFC,GAAyBC,EAAAA,EAAAA,IAAS,CAEtCC,MACE,OAAOC,EAAMH,sBACd,EACDI,IAAIC,GACFC,EAAK,gCAAiCD,EACvC,IAIGE,GAAgBC,EAAAA,EAAAA,IAAI,CACxBC,IAAK,EACLC,SAAU,GACVC,WAAY,GACZC,kBAAmB,KAIfC,GAAWL,EAAAA,EAAAA,KAAI,GAGfM,GAAkBN,EAAAA,EAAAA,KAAI,GAGtBO,EAAcC,UAClB,IACE,IAAIC,QAAaC,EAAAA,GAAAA,IAAc,kBAC3BC,QAAaD,EAAAA,GAAAA,IAAc,kBAAoBT,GAGnD,GAFAW,QAAQC,IAAIJ,EAAKK,MACjBF,QAAQC,IAAIF,EAAKG,MACK,OAAlBL,EAAKK,KAAKC,MAAmC,OAAlBJ,EAAKG,KAAKC,KAAe,CAEtD,IAAIb,EAAWO,EAAKK,KAAKZ,SACrBC,EAAa,GACjBD,EAASc,SAAQC,IACfd,EAAWe,KAAKD,EAAKhB,GAArB,IAGF,IAAIG,EAAoB,GACxBO,EAAKG,KAAKK,KAAKjB,SAASc,SAAQC,IAC9Bb,EAAkBc,KAAKD,EAAKhB,GAA5B,IAGFF,EAAcqB,MAAMnB,GAAKA,EACzBF,EAAcqB,MAAMlB,SAAWA,EAC/BH,EAAcqB,MAAMjB,WAAaA,EACjCJ,EAAcqB,MAAMhB,kBAAoBA,EAExCiB,EAAwBjB,EACzB,MACCkB,EAAAA,EAAAA,IAAU,CACRC,QAASd,EAAKK,KAAKU,IACnBC,KAAM,WAERH,EAAAA,EAAAA,IAAU,CACRC,QAASZ,EAAKG,KAAKU,IACnBC,KAAM,UAGVb,QAAQC,IAAI,WAGb,CAFC,MAAOa,GACPd,QAAQC,IAAI,KAAMa,EACnB,GAIGL,EAA2BD,IAC/BR,QAAQC,IAAIO,GACZ,IAAIO,EAAeP,EAAMQ,OAGzBvB,EAASe,MAAQO,IAAiB5B,EAAcqB,MAAMjB,WAAWyB,OACjEtB,EAAgBc,MAAQO,EAAe,GAAKA,EAAe5B,EAAcqB,MAAMjB,WAAWyB,MAA1F,EAIIC,EAAwBC,IAE5B/B,EAAcqB,MAAMhB,kBAAoB0B,EAAM/B,EAAcqB,MAAMjB,WAAa,GAE/EG,EAAgBc,OAAQ,CAAxB,EAIIW,EAAeC,IACnBC,EAAAA,EAAAA,QAAqB,oBAChBC,MAAK,KACJF,GAAM,IAEPG,OAAM,QAJX,EAUIC,EAAe,KACnB5C,EAAuB4B,OAAQ,CAA/B,EAIIiB,EAAgB7B,UACpB,IAAI8B,EAAKC,EACT3B,QAAQC,IAAI,aACZyB,EAAM,4BAA8BvC,EAAcqB,MAAMnB,GACxD,IACEsC,QAAY7B,EAAAA,GAAAA,IAAc4B,EAAKvC,EAAcqB,MAAMhB,mBACnDQ,QAAQC,IAAI,oBAAqB0B,EAAIzB,MAChB,OAAjByB,EAAIzB,KAAKC,OACXO,EAAAA,EAAAA,IAAU,CACRC,QAASgB,EAAIzB,KAAKU,IAClBC,KAAM,YAER3B,EAAK,gBACLsC,MAEAd,EAAAA,EAAAA,IAAU,CACRC,QAASgB,EAAIzB,KAAKU,IAClBC,KAAM,SASX,CANC,MAAOC,GACPd,QAAQC,IAAI,KAAMa,IAClBJ,EAAAA,EAAAA,IAAU,CACRC,QAAS,QAAUG,EACnBD,KAAM,SAET,G,OAIHe,EAAAA,EAAAA,IAAMhD,GAAyBK,IACb,GAAZA,GACFU,EAAYZ,EAAMM,GACnB,I,o6CCrLH,MAAMwC,EAAc,EAEpB,O","sources":["webpack://hosp/./src/views/sys/user/GrantRoleDialog.vue","webpack://hosp/./src/views/sys/user/GrantRoleDialog.vue?81e9"],"sourcesContent":["<template>\r\n  <el-dialog v-model=\"grantRoleDialogVisible\" title=\"分配角色\" :before-close=\"handleClose\" width=\"600px\" draggable>\r\n    <el-form :model=\"grantRoleForm\">\r\n\r\n      <el-form-item>\r\n        <el-checkbox v-model=\"checkAll\" :indeterminate=\"isIndeterminate\" @change=\"handleCheckAllChange\">全选</el-checkbox>\r\n      </el-form-item>\r\n      <el-form-item>\r\n        <el-checkbox-group v-model=\"grantRoleForm.checkedRoleIdList\" @change=\"handleCheckedRoleChange\">\r\n          <el-checkbox v-for=\"role in grantRoleForm.roleList\" :key=\"role.id\" :label=\"role.id\" name=\"roleList\">\r\n            {{ role.name }}\r\n          </el-checkbox>\r\n        </el-checkbox-group>\r\n      </el-form-item>\r\n\r\n    </el-form>\r\n    <template #footer>\r\n      <span class=\"dialog-footer\">\r\n        <el-button @click=\"handleReset(id)\">重置</el-button>\r\n        <el-button @click=\"handleCancel\">取消</el-button>\r\n        <el-button type=\"primary\" @click=\"handleConfirm\">确定</el-button>\r\n      </span>\r\n    </template>\r\n  </el-dialog>\r\n</template>\r\n\r\n<script setup>\r\nimport {defineProps, defineEmits, computed, ref, watch} from 'vue';\r\nimport AxiosUtil from \"@/utils/AxiosUtil\";\r\nimport {ElMessageBox, ElMessage} from \"element-plus\";\r\nimport qs from \"qs\";\r\n\r\n// 定义传入该子组件的参数\r\nconst props = defineProps({\r\n  grantRoleDialogVisible: {\r\n    type: Boolean,\r\n    required: true,\r\n    default: false\r\n  },\r\n  id: {\r\n    type: Number,\r\n    required: true,\r\n    default: -1\r\n  },\r\n});\r\n\r\n// 定义组件（自定义）事件\r\nconst emit = defineEmits(['update:grantRoleDialogVisible', 'handleSubmit']);\r\n\r\n// 定义“编辑”对话框的显示状态\r\nconst grantRoleDialogVisible = computed({\r\n  // 只读！读取时从父组件获取，更新时更新父组件\r\n  get() {\r\n    return props.grantRoleDialogVisible;\r\n  },\r\n  set(newValue) {\r\n    emit('update:grantRoleDialogVisible', newValue);\r\n  }\r\n});\r\n\r\n// 定义表单数据\r\nconst grantRoleForm = ref({\r\n  id: -1,\r\n  roleList: [], // 所有的 角色列表\r\n  roleIdList: [], // 所有的 角色ID列表\r\n  checkedRoleIdList: [], // 已选的 角色ID列表\r\n});\r\n\r\n// 定义是否“全选”\r\nconst checkAll = ref(false);\r\n\r\n// 定义是否“全选”中间状态\r\nconst isIndeterminate = ref(true);\r\n\r\n// 表单重置事件\r\nconst handleReset = async (id) => {\r\n  try {\r\n    let res1 = await AxiosUtil.get('/api/sys/roles');\r\n    let res2 = await AxiosUtil.get('/api/sys/users/' + id);\r\n    console.log(res1.data);\r\n    console.log(res2.data);\r\n    if (res1.data.code == 20010 && res2.data.code == 20010) {\r\n      // 所有的 角色列表、角色ID列表\r\n      let roleList = res1.data.roleList;\r\n      let roleIdList = [];\r\n      roleList.forEach(role => {\r\n        roleIdList.push(role.id);\r\n      });\r\n      // 已选的 角色ID列表\r\n      let checkedRoleIdList = [];\r\n      res2.data.user.roleList.forEach(role => {\r\n        checkedRoleIdList.push(role.id);\r\n      })\r\n      // 更新表格数据\r\n      grantRoleForm.value.id = id;\r\n      grantRoleForm.value.roleList = roleList;\r\n      grantRoleForm.value.roleIdList = roleIdList;\r\n      grantRoleForm.value.checkedRoleIdList = checkedRoleIdList;\r\n      // 更新全选状态\r\n      handleCheckedRoleChange(checkedRoleIdList);\r\n    } else {\r\n      ElMessage({\r\n        message: res1.data.msg,\r\n        type: 'error',\r\n      });\r\n      ElMessage({\r\n        message: res2.data.msg,\r\n        type: 'error',\r\n      });\r\n    }\r\n    console.log('从后台填充...');\r\n  } catch (e) {\r\n    console.log('e=', e);\r\n  }\r\n}\r\n\r\n// 处理选择集的改变\r\nconst handleCheckedRoleChange = (value) => {\r\n  console.log(value);\r\n  let checkedCount = value.length;\r\n\r\n  // 更新全选状态\r\n  checkAll.value = checkedCount === grantRoleForm.value.roleIdList.length;\r\n  isIndeterminate.value = checkedCount > 0 && checkedCount < grantRoleForm.value.roleIdList.length;\r\n}\r\n\r\n// 处理“全选”复选框的变化\r\nconst handleCheckAllChange = (val) => {\r\n  // 更新已选择的列表\r\n  grantRoleForm.value.checkedRoleIdList = val ? grantRoleForm.value.roleIdList : [];\r\n  // 取消“全选”中间状态\r\n  isIndeterminate.value = false;\r\n}\r\n\r\n// 定义关闭对话框前的确认操作\r\nconst handleClose = (done) => {\r\n  ElMessageBox.confirm('确认在未保存的情况下关闭对话框？')\r\n      .then(() => {\r\n        done()\r\n      })\r\n      .catch(() => {\r\n        // catch error\r\n      })\r\n}\r\n\r\n// 定义对话框关闭事件\r\nconst handleCancel = () => {\r\n  grantRoleDialogVisible.value = false;\r\n}\r\n\r\n// 定义确认按钮事件\r\nconst handleConfirm = async () => {\r\n  let url, res;\r\n  console.log('提交角色分配...');\r\n  url = '/api/sys/users/grantRole/' + grantRoleForm.value.id;\r\n  try {\r\n    res = await AxiosUtil.put(url, grantRoleForm.value.checkedRoleIdList);\r\n    console.log(\"分配用户角色 res.data= \", res.data);\r\n    if (res.data.code == 20030) {\r\n      ElMessage({\r\n        message: res.data.msg,\r\n        type: 'success',\r\n      });\r\n      emit('handleSubmit'); // 触发自定义事件，使父组件刷新数据\r\n      handleCancel(); // 关闭对话框\r\n    } else {\r\n      ElMessage({\r\n        message: res.data.msg,\r\n        type: 'error',\r\n      });\r\n    }\r\n  } catch (e) {\r\n    console.log('e=', e);\r\n    ElMessage({\r\n      message: '操作失败！' + e,\r\n      type: 'error',\r\n    });\r\n  }\r\n}\r\n\r\n// 当对话框重新显示时重置表单\r\nwatch(grantRoleDialogVisible, (newValue) => {\r\n  if (newValue == true) {\r\n    handleReset(props.id);\r\n  }\r\n})\r\n\r\n\r\n</script>\r\n\r\n\r\n<script>\r\nexport default {\r\n  name: \"GrantRoleDialog\"\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>","import script from \"./GrantRoleDialog.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./GrantRoleDialog.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"names":["name","grantRoleDialogVisible","computed","get","props","set","newValue","emit","grantRoleForm","ref","id","roleList","roleIdList","checkedRoleIdList","checkAll","isIndeterminate","handleReset","async","res1","AxiosUtil","res2","console","log","data","code","forEach","role","push","user","value","handleCheckedRoleChange","ElMessage","message","msg","type","e","checkedCount","length","handleCheckAllChange","val","handleClose","done","ElMessageBox","then","catch","handleCancel","handleConfirm","url","res","watch","__exports__"],"sourceRoot":""}