{"version":3,"file":"js/691.5aa5cf4b.js","mappings":"kPA+PA,EAAe,CACbA,KAAM,c,wPAtLFC,GAAoBC,EAAAA,EAAAA,IAAS,CAEjCC,MACE,OAAOC,EAAMH,iBACd,EACDI,IAAIC,GACFC,EAAK,2BAA4BD,EAClC,IAIGE,GAAWC,EAAAA,EAAAA,IAAI,CACnBC,IAAK,EACLC,OAAQ,GACRC,aAAc,EACdC,UAAU,EACVC,KAAM,KAIFC,GAAiBN,EAAAA,EAAAA,IAAI,IAErBO,EAAeC,MAAOC,EAAMC,EAAOC,KAIvC,IAAIC,EAWJ,GATkB,UAAdH,EAAKI,QACHH,GAASA,EAAMI,OAAS,EAC1BH,EAAS,IAAII,MAAM,gBAEnBH,EAAM,gCAAkCb,EAASW,MAAMT,GAAK,WAAaS,GAKzEE,EAAK,CAEP,IAAII,QAAYC,EAAAA,GAAAA,KAAeL,GAEV,GAAjBI,EAAIE,KAAKC,KACXR,EAAS,IAAII,MAAMC,EAAIE,KAAKE,MAE5BT,GAEH,GAIGU,GAAgBC,EAAAA,EAAAA,IAAS,CAC7BnB,aAAc,CACZ,CAACoB,UAAU,EAAMC,QAAS,WAAYC,QAAS,SAEjDvB,OAAQ,CACN,CAACqB,UAAU,EAAMC,QAAS,UAAWC,QAAS,QAC9C,CAACC,UAAWnB,EAAckB,QAAS,UACnC,CAACC,UAAWnB,EAAckB,QAAS,SAErCrB,SAAU,CACR,CAACmB,UAAU,EAAMC,QAAS,SAAUC,QAAS,SAE/CpB,KAAM,CACJ,CAACkB,UAAU,EAAOI,IAAK,IAAKH,QAAS,iBAAkBC,QAAS,WAK9DG,GAAc5B,EAAAA,EAAAA,IAAI,MAGlB6B,EAAcrB,UAClB,IAAW,GAAPP,EACFF,EAASW,MAAQ,CACfT,IAAK,EACLC,OAAQ,GACRC,aAAc,EACdC,UAAU,EACVC,KAAM,IAERyB,QAAQC,IAAI,eACP,CACL,IAAIf,QAAYC,EAAAA,GAAAA,IAAc,mBAAqBhB,GAEnD,GADA6B,QAAQC,IAAIf,EAAIE,MACK,OAAjBF,EAAIE,KAAKC,KAAe,CAC1B,IAAIa,EAAOhB,EAAIE,KAAKc,KAEpBjC,EAASW,MAAQsB,CAClB,MACCC,EAAAA,EAAAA,IAAU,CACRT,QAASR,EAAIE,KAAKE,IAClBc,KAAM,UAGVJ,QAAQC,IAAI,WACb,CAED,IAAIf,QAAYC,EAAAA,GAAAA,IAAc,yBAE9B,GADAa,QAAQC,IAAIf,EAAIE,MACK,OAAjBF,EAAIE,KAAKC,KAAe,CAC1B,IAAIgB,EAAc,GAClBnB,EAAIE,KAAKZ,eAAe8B,SAAQC,IAC9BA,EAAK9C,KAAO,KAAO8C,EAAK9C,KACxB4C,EAAYG,KAAKD,GACjBA,EAAKE,SAASH,SAAQI,IACpBA,EAAMjD,KAAO,OAASiD,EAAMjD,KAC5B4C,EAAYG,KAAKE,EAAjB,GAFF,IAMFlC,EAAeI,MAAQyB,CACxB,MACCF,EAAAA,EAAAA,IAAU,CACRT,QAASR,EAAIE,KAAKE,IAClBc,KAAM,SAET,EAIGO,EAAeC,IACnBC,EAAAA,EAAAA,QAAqB,oBAChBC,MAAK,KACJF,GAAM,IAEPG,OAAM,QAJX,EAUIC,EAAe,KACnBtD,EAAkBkB,OAAQ,CAA1B,EAIIqC,EAAgB,KAEpBnB,EAAYlB,MAAMsC,UAASxC,UACzB,GAAIyC,EAAO,CAET,IAAIrC,EAAKI,GACiB,GAAtBjB,EAASW,MAAMT,IACjB6B,QAAQC,IAAI,WACZnB,EAAM,kBACNI,QAAYC,EAAAA,GAAAA,KAAeL,EAAKb,EAASW,OACzCoB,QAAQC,IAAI,kBAAmBf,EAAIE,QAEnCY,QAAQC,IAAI,WACZnB,EAAM,kBACNI,QAAYC,EAAAA,GAAAA,IAAcL,EAAKb,EAASW,OACxCoB,QAAQC,IAAI,kBAAmBf,EAAIE,OAEhB,OAAjBF,EAAIE,KAAKC,MAAkC,OAAjBH,EAAIE,KAAKC,OACrCc,EAAAA,EAAAA,IAAU,CACRT,QAASR,EAAIE,KAAKE,IAClBc,KAAM,YAERpC,EAAK,gBACLgD,MAEAb,EAAAA,EAAAA,IAAU,CACRT,QAASR,EAAIE,KAAKE,IAClBc,KAAM,SAGX,IA5BH,E,OAiCFgB,EAAAA,EAAAA,IAAM1D,GAAoBK,IACR,GAAZA,GACFgC,EAAYlC,EAAMM,GACnB,I,qxDCrPH,MAAMkD,EAAc,EAEpB,O","sources":["webpack://hosp/./src/views/bsns/room/EditDialog.vue","webpack://hosp/./src/views/bsns/room/EditDialog.vue?5991"],"sourcesContent":["<template>\r\n  <el-dialog v-model=\"editDialogVisible\" :title=\"title\" :before-close=\"handleClose\" width=\"600px\" draggable>\r\n    <el-form\r\n        ref=\"editFormRef\"\r\n        :model=\"editForm\"\r\n        :rules=\"editFormRules\"\r\n        inline\r\n        label-width=\"80px\"\r\n        label-position=\"right\"\r\n        status-icon>\r\n      <el-form-item label=\"所属科室\" prop=\"departmentId\" style=\"width: 48%;\">\r\n        <el-select v-model=\"editForm.departmentId\" placeholder=\"请选择所属科室\">\r\n          <el-option label=\"顶级科室\" :value=\"0\"/>\r\n          <el-option v-for=\"department in departmentList\" :key=\"department.id\" :label=\"department.name\"\r\n                     :value=\"department.id\"/>\r\n        </el-select>\r\n      </el-form-item>\r\n<!--      <el-form-item label=\"状态\" prop=\"disabled\" style=\"width: 40%;\">-->\r\n<!--        <el-switch-->\r\n<!--            v-model=\"editForm.disabled\"-->\r\n<!--            style=\"&#45;&#45;el-switch-on-color: #13ce66; &#45;&#45;el-switch-off-color: #ff4949\"-->\r\n<!--            active-text=\"启用\"-->\r\n<!--            inactive-text=\"禁用\"-->\r\n<!--            :active-value=\"false\"-->\r\n<!--            :inactive-value=\"true\"-->\r\n<!--            width=\"50px\"-->\r\n<!--            disabled-->\r\n<!--        />-->\r\n<!--      </el-form-item>-->\r\n      <el-form-item label=\"诊室号\" prop=\"roomNo\" style=\"width: 100%;\">\r\n        <el-input v-model=\"editForm.roomNo\" type=\"number\"/>\r\n      </el-form-item>\r\n      <el-form-item label=\"备注\" prop=\"note\" style=\"width: 100%;\">\r\n        <el-input v-model=\"editForm.note\" type=\"textarea\" :rows=\"5\"/>\r\n      </el-form-item>\r\n    </el-form>\r\n    <template #footer>\r\n      <span class=\"dialog-footer\">\r\n        <el-button @click=\"handleReset(id)\">重置</el-button>\r\n        <el-button @click=\"handleCancel\">取消</el-button>\r\n        <el-button type=\"primary\" @click=\"handleConfirm\">确定</el-button>\r\n      </span>\r\n    </template>\r\n  </el-dialog>\r\n</template>\r\n\r\n<script setup>\r\nimport {defineProps, defineEmits, computed, ref, watch, reactive} from 'vue';\r\nimport AxiosUtil from \"@/utils/AxiosUtil\";\r\nimport {ElMessageBox, ElMessage} from \"element-plus\";\r\n\r\n// 定义传入该子组件的参数\r\nconst props = defineProps({\r\n  editDialogVisible: {\r\n    type: Boolean,\r\n    required: true,\r\n    default: false\r\n  },\r\n  id: {\r\n    type: Number,\r\n    required: true,\r\n    default: -1\r\n  },\r\n  title: {\r\n    type: String,\r\n    required: true,\r\n    default: ''\r\n  }\r\n});\r\n\r\n// 定义组件（自定义）事件\r\nconst emit = defineEmits(['update:editDialogVisible', 'handleSubmit']);\r\n\r\n// 定义“编辑”对话框的显示状态\r\nconst editDialogVisible = computed({\r\n  // 只读！读取时从父组件获取，更新时更新父组件\r\n  get() {\r\n    return props.editDialogVisible;\r\n  },\r\n  set(newValue) {\r\n    emit('update:editDialogVisible', newValue);\r\n  }\r\n});\r\n\r\n// 定义表单数据\r\nconst editForm = ref({\r\n  id: -1,\r\n  roomNo: '',\r\n  departmentId: 0,\r\n  disabled: false,\r\n  note: '',\r\n});\r\n\r\n// 定义科室列表\r\nconst departmentList = ref([]);\r\n\r\nconst validateRoom = async (rule, value, callback) => {\r\n  // console.log(rule.field)\r\n  // console.log(value)\r\n\r\n  let url;\r\n  // 基础格式验证通过后，才给 url 赋值。\r\n  if (rule.field == 'roomNo') {\r\n    if (value && value.length > 8) {\r\n      callback(new Error('诊室号长度不可超过8位'));\r\n    } else {\r\n      url = '/api/bsns/rooms/checkRoom?id=' + editForm.value.id + '&roomNo=' + value;\r\n    }\r\n  }\r\n  // url 有值，才向后台发送验证请求。\r\n  // console.log(url);\r\n  if (url) {\r\n    // console.log('向后台发送请求');\r\n    let res = await AxiosUtil.post(url);\r\n    // console.log(res.data);\r\n    if (res.data.code == 1) {\r\n      callback(new Error(res.data.msg));\r\n    } else {\r\n      callback();\r\n    }\r\n  }\r\n}\r\n\r\n// 定义表单验证规则\r\nconst editFormRules = reactive({\r\n  departmentId: [\r\n    {required: true, message: '所属科室不能为空', trigger: 'blur'},\r\n  ],\r\n  roomNo: [\r\n    {required: true, message: '诊室号不能为空', trigger: 'blur'},\r\n    {validator: validateRoom, trigger: 'change'},\r\n    {validator: validateRoom, trigger: 'blur'},\r\n  ],\r\n  disabled: [\r\n    {required: true, message: '状态不能为空', trigger: 'blur'},\r\n  ],\r\n  note: [\r\n    {required: false, max: 192, message: '备注信息不可超过192个字符', trigger: 'blur'},\r\n  ],\r\n})\r\n\r\n// 定义表单引用\r\nconst editFormRef = ref(null);\r\n\r\n// 表单重置事件\r\nconst handleReset = async (id) => {\r\n  if (id == -1) {\r\n    editForm.value = {\r\n      id: -1,\r\n      roomNo: '',\r\n      departmentId: 0,\r\n      disabled: false,\r\n      note: '',\r\n    };\r\n    console.log('清空表单...');\r\n  } else {\r\n    let res = await AxiosUtil.get('/api/bsns/rooms/' + id);\r\n    console.log(res.data);\r\n    if (res.data.code == 20010) {\r\n      let room = res.data.room;\r\n      // 更新表格数据\r\n      editForm.value = room;\r\n    } else {\r\n      ElMessage({\r\n        message: res.data.msg,\r\n        type: 'error',\r\n      });\r\n    }\r\n    console.log('从后台填充...');\r\n  }\r\n  // 无论是新增还是编辑，都需要向后台请求科室列表\r\n  let res = await AxiosUtil.get('/api/bsns/departments');\r\n  console.log(res.data);\r\n  if (res.data.code == 20010) {\r\n    let departments = [];\r\n    res.data.departmentList.forEach(item => {\r\n      item.name = \"+ \" + item.name;\r\n      departments.push(item);\r\n      item.children.forEach(child => {\r\n        child.name = \"••• \" + child.name;\r\n        departments.push(child);\r\n      })\r\n    });\r\n    // 更新科室列表\r\n    departmentList.value = departments;\r\n  } else {\r\n    ElMessage({\r\n      message: res.data.msg,\r\n      type: 'error',\r\n    });\r\n  }\r\n}\r\n\r\n// 定义关闭对话框前的确认操作\r\nconst handleClose = (done) => {\r\n  ElMessageBox.confirm('确认在未保存的情况下关闭对话框？')\r\n      .then(() => {\r\n        done()\r\n      })\r\n      .catch(() => {\r\n        // catch error\r\n      })\r\n}\r\n\r\n// 定义对话框关闭事件\r\nconst handleCancel = () => {\r\n  editDialogVisible.value = false;\r\n}\r\n\r\n// 定义确认按钮事件\r\nconst handleConfirm = () => {\r\n  // 表单验证\r\n  editFormRef.value.validate(async valid => {\r\n    if (valid) {\r\n      // 表单验证通过\r\n      let url, res;\r\n      if (editForm.value.id == -1) {\r\n        console.log('提交新增...');\r\n        url = '/api/bsns/rooms';\r\n        res = await AxiosUtil.post(url, editForm.value);\r\n        console.log(\"新增诊室 res.data= \", res.data);\r\n      } else {\r\n        console.log('提交修改...');\r\n        url = '/api/bsns/rooms';\r\n        res = await AxiosUtil.put(url, editForm.value);\r\n        console.log(\"修改诊室 res.data= \", res.data);\r\n      }\r\n      if (res.data.code == 20020 || res.data.code == 20030) {\r\n        ElMessage({\r\n          message: res.data.msg,\r\n          type: 'success',\r\n        });\r\n        emit('handleSubmit'); // 触发自定义事件，使父组件刷新数据\r\n        handleCancel(); // 关闭对话框\r\n      } else {\r\n        ElMessage({\r\n          message: res.data.msg,\r\n          type: 'error',\r\n        });\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\n// 当对话框重新显示时重置表单\r\nwatch(editDialogVisible, (newValue) => {\r\n  if (newValue == true) {\r\n    handleReset(props.id);\r\n  }\r\n})\r\n\r\n</script>\r\n\r\n\r\n<script>\r\nexport default {\r\n  name: \"EditDialog\"\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>","import script from \"./EditDialog.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./EditDialog.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"names":["name","editDialogVisible","computed","get","props","set","newValue","emit","editForm","ref","id","roomNo","departmentId","disabled","note","departmentList","validateRoom","async","rule","value","callback","url","field","length","Error","res","AxiosUtil","data","code","msg","editFormRules","reactive","required","message","trigger","validator","max","editFormRef","handleReset","console","log","room","ElMessage","type","departments","forEach","item","push","children","child","handleClose","done","ElMessageBox","then","catch","handleCancel","handleConfirm","validate","valid","watch","__exports__"],"sourceRoot":""}